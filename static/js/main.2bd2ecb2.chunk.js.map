{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","margin","App","classes","useState","descriptions","setDescriptions","counter","setCounter","name","setName","phone","setPhone","mobile","setMobile","date","setDate","article","setArticle","handleChangeDescription","event","description","target","value","handleChangePrice","price","handleChangeQuantity","quantity","className","Container","maxWidth","noValidate","autoComplete","Typography","variant","component","TextField","fullWidth","label","onChange","type","ButtonGroup","size","Button","startIcon","onClick","Divider","push","color","fetch","then","response","arrayBuffer","excelTemplate","JsExcelTemplate","fromArrayBuffer","set","totalPrice","map","element","index","i","saveAs","toBlob","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bd2ecb2.chunk.js","sourcesContent":["import \"./App.css\";\nimport {\n  Container,\n  TextField,\n  Typography,\n  Button,\n  ButtonGroup,\n  Divider,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AddBoxIcon from \"@material-ui/icons/AddBox\";\nimport SaveAltIcon from \"@material-ui/icons/SaveAlt\";\nimport \"@fontsource/roboto\";\nimport React, { useState } from \"react\";\nimport { saveAs } from \"file-saver\";\nimport JsExcelTemplate from \"js-excel-template/browser/browser\";\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: \"20px\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [descriptions, setDescriptions] = useState([]);\n  const [counter, setCounter] = useState(1);\n  const [name, setName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [mobile, setMobile] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [article, setArticle] = useState([]);\n\n  const handleDownload = () => {\n    fetch(\"./test.xlsx\")\n      .then((response) => response.arrayBuffer())\n      .then((arrayBuffer) => {\n        const excelTemplate = JsExcelTemplate.fromArrayBuffer(arrayBuffer);\n        excelTemplate.set(\"name\", name);\n        excelTemplate.set(\"phone\", phone);\n        excelTemplate.set(\"mobile\", mobile);\n        excelTemplate.set(\"date\", date);\n        let totalPrice = 0;\n        article.map((element, index) => {\n          excelTemplate.set(\n            \"article[\" + index + \"]['description']\",\n            element.description\n          );\n          excelTemplate.set(\"article[\" + index + \"]['price']\", element.price);\n          excelTemplate.set(\n            \"article[\" + index + \"]['count']\",\n            element.quantity\n          );\n          excelTemplate.set(\n            \"article[\" + index + \"]['total']\",\n            element.price * element.quantity\n          );\n          totalPrice = totalPrice + element.price * element.quantity;\n\n          return element;\n        });\n\n        excelTemplate.set(\"totalPrice\", totalPrice);\n\n        for (let i = counter - 1; i <= 19; i++) {\n          excelTemplate.set(\"article[\" + i + \"]['description']\", \"\");\n          excelTemplate.set(\"article[\" + i + \"]['price']\", \"\");\n          excelTemplate.set(\"article[\" + i + \"]['count']\", \"\");\n          excelTemplate.set(\"article[\" + i + \"]['total']\", \"\");\n        }\n        saveAs(excelTemplate.toBlob(), \"test.xlsx\");\n      });\n  };\n\n  const handleChangeName = (event) => {\n    setName(event.target.value);\n  };\n\n  const handleChangePhone = (event) => {\n    setPhone(event.target.value);\n  };\n\n  const handleChangeMobile = (event) => {\n    setMobile(event.target.value);\n  };\n\n  const handleChangeDate = (event) => {\n    setDate(event.target.value);\n  };\n\n  const handleChangeDescription = (event) => {\n    article[counter - 1].description = event.target.value;\n    setArticle(article);\n  };\n\n  const handleChangePrice = (event) => {\n    article[counter - 1].price = event.target.value;\n    setArticle(article);\n  };\n\n  const handleChangeQuantity = (event) => {\n    article[counter - 1].quantity = event.target.value;\n    setArticle(article);\n  };\n\n  const handleInputDescriptions = () => {\n    setDescriptions([\n      ...descriptions,\n      <div key={counter - 1}>\n        <Typography># {counter}</Typography>\n        <TextField\n          margin=\"normal\"\n          fullWidth\n          variant=\"filled\"\n          label=\"ARTÍCULO\"\n          onChange={handleChangeDescription}\n        />\n        <TextField\n          margin=\"normal\"\n          fullWidth\n          variant=\"filled\"\n          label=\"Tarifa\"\n          onChange={handleChangePrice}\n        />\n        <TextField\n          margin=\"normal\"\n          fullWidth\n          variant=\"filled\"\n          label=\"Cant.\"\n          onChange={handleChangeQuantity}\n        />\n        <Divider className={classes.margin} variant=\"middle\" />\n      </div>,\n    ]);\n    article.push({\n      description: \"\",\n      price: 0,\n      quantity: 0,\n    });\n    setArticle(article);\n    setCounter(counter + 1);\n  };\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"sm\">\n        <form noValidate autoComplete=\"off\">\n          <Typography variant=\"h4\" component=\"h2\">\n            Datos del cliente\n          </Typography>\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            variant=\"filled\"\n            label=\"Nombre\"\n            onChange={handleChangeName}\n          />\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            variant=\"filled\"\n            label=\"Teléfono\"\n            onChange={handleChangePhone}\n          />\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            variant=\"filled\"\n            label=\"Móvil\"\n            onChange={handleChangeMobile}\n          />\n          <Typography variant=\"h4\" component=\"h2\">\n            Fecha\n          </Typography>\n          <TextField\n            type=\"date\"\n            margin=\"normal\"\n            fullWidth\n            variant=\"filled\"\n            onChange={handleChangeDate}\n          />\n          <Typography variant=\"h4\" component=\"h2\">\n            ARTÍCULO\n          </Typography>\n          {descriptions}\n          <ButtonGroup\n            variant=\"contained\"\n            size=\"large\"\n            className={classes.margin}\n          >\n            <Button\n              startIcon={<AddBoxIcon />}\n              onClick={handleInputDescriptions}\n              color=\"primary\"\n            >\n              Add\n            </Button>\n            <Button\n              onClick={handleDownload}\n              startIcon={<SaveAltIcon />}\n              color=\"secondary\"\n            >\n              Download\n            </Button>\n          </ButtonGroup>\n        </form>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}